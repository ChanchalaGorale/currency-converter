{"version":3,"sources":["Converter/index.js","App.js","reportWebVitals.js","index.js"],"names":["myoptions","value","label","Converter","useState","getData","setGetData","currencyvalue","setCurrencyvalue","currencycode","setCurrencynamecode","data","setData","lable","setLable","todaysDate","moment","format","lastDate","subtract","mydata","labels","datasets","fill","backgroundColor","borderColor","useEffect","axios","get","then","res","bpi","code","rate","undefined","Object","keys","values","className","onChange","e","target","handleChange","defaultValue","aria-label","style","maxWidth","display","justifyContent","map","item","options","scales","width","height","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iQAKMA,EAAY,CACd,CAAEC,MAAO,MAAOC,MAAO,wBACvB,CAAED,MAAO,MAAOC,MAAO,0BACvB,CAAED,MAAO,MAAOC,MAAO,SA6EZC,MA1Ef,WAAsB,IAAD,EACaC,mBAAS,IADtB,mBACVC,EADU,KACDC,EADC,OAEyBF,mBAAS,IAFlC,mBAEVG,EAFU,KAEKC,EAFL,OAG2BJ,mBAAS,IAHpC,mBAGVK,EAHU,KAGIC,EAHJ,OAION,mBAAS,IAJhB,mBAIVO,EAJU,KAIJC,EAJI,OAKSR,mBAAS,IALlB,mBAKVS,EALU,KAKHC,EALG,OAMiBV,mBAAS,IAN1B,mBAQXW,GARW,UAQEC,MAASC,OAAO,eAC7BC,EAAWF,IAAOA,MAASG,SAAS,GAAI,SAASF,OAAO,cAExDG,EAAS,CACXC,OAAQR,EACRS,SAAU,CACN,CACIpB,MAAO,qBACPS,KAAMA,EACNY,MAAM,EACNC,gBAAkC,QAAjBf,EAAyB,uBAA0C,QAAjBA,EAAyB,wBAA0B,wBACtHgB,YAA8B,QAAjBhB,EAAyB,UAA6B,QAAjBA,EAAyB,UAAY,aAyCnG,OAhCAiB,qBAAU,WACNC,IACKC,IAAI,qDACJC,MAAK,SAACC,GACHA,EAAMA,EAAInB,KAAKoB,IACfzB,EAAWwB,GACXpB,EAAoBoB,EAAG,IAAQE,MAC/BxB,EAAiBsB,EAAG,IAAQG,WAErC,IAQHP,qBAAU,WACe,KAAjBjB,QAAwCyB,IAAjBzB,GACvBkB,IACKC,IADL,yEAE0EnB,EAF1E,kBAEgGS,EAFhG,gBAEgHH,IAE3Gc,MAAK,SAACC,GACHA,EAAMA,EAAInB,KAAKoB,IAEfjB,EAASqB,OAAOC,KAAKN,IACrBlB,EAAQuB,OAAOE,OAAOP,SAGnC,CAACrB,IAGA,sBAAK6B,UAAU,MAAf,UACI,qBAAIA,UAAU,MAAd,gCAAwC/B,EAAxC,IAAwDE,KAExD,wBAAQ8B,SAAU,SAACC,GAAD,OAzBL,SAACA,GAClBA,EAAIA,EAAEC,OAAOxC,MACbS,EAAoBL,EAAQmC,GAAGR,MAC/BxB,EAAiBH,EAAQmC,GAAGP,MAsBCS,CAAaF,IAAIG,aAAa,MAAML,UAAU,sCAAsCM,aAAW,0BAA0BC,MAAO,CAAEC,SAAU,QAASC,QAAS,eAAgBC,eAAgB,UAAvN,SACKhD,EAAUiD,KAAI,SAAAC,GAAI,OAAI,wBAAyBjD,MAAOiD,EAAKjD,MAArC,SAA6CiD,EAAKhD,OAArCgD,EAAKjD,YAG7C,cAAC,OAAD,CAAMU,KAAMS,EAAQ+B,QA5CZ,CACZC,OAAQ,IA2CkCC,MAAO,GAAIC,OAAQ,S,OCpEtDC,MARf,WACE,OACE,qBAAKjB,UAAU,MAAf,SACE,cAAC,EAAD,OCMSkB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB7B,MAAK,YAAkD,IAA/C8B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.9aabcc58.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from \"axios\";\nimport moment from \"moment\";\nimport { Line } from \"react-chartjs-2\";\n\nconst myoptions = [\n    { value: \"USD\", label: \"United States Dollar\" },\n    { value: \"GBP\", label: \"British Pound Sterling\" },\n    { value: \"EUR\", label: \"Euro\" },\n];\n\nfunction Converter() {\n    const [getData, setGetData] = useState([]);\n    const [currencyvalue, setCurrencyvalue] = useState(\"\");\n    const [currencycode, setCurrencynamecode] = useState(\"\");\n    const [data, setData] = useState([]);\n    const [lable, setLable] = useState([]);\n    const [wholedata, setWholedata] = useState({});\n\n    const todaysDate = moment().format(\"YYYY-MM-DD\");\n    const lastDate = moment(moment().subtract(60, \"days\")).format(\"YYYY-MM-DD\");\n\n    const mydata = {\n        labels: lable,\n        datasets: [\n            {\n                label: \"Last 60 days trend\",\n                data: data,\n                fill: true,\n                backgroundColor: currencycode === \"USD\" ? \"rgb(30,144,255, 0.2)\" : currencycode === \"GBP\" ? \"rgb(140, 30, 20, 0.2)\" : \"rgb(19, 138, 29, 0.2)\",\n                borderColor: currencycode === \"USD\" ? \"#1e90ff\" : currencycode === \"GBP\" ? \"#8c2214\" : \"#11821a\"\n            },\n        ],\n    };\n\n    const options = {\n        scales: {},\n    };\n\n    useEffect(() => {\n        axios\n            .get(\"https://api.coindesk.com/v1/bpi/currentprice.json\")\n            .then((res) => {\n                res = res.data.bpi;\n                setGetData(res);\n                setCurrencynamecode(res[\"USD\"].code);\n                setCurrencyvalue(res[\"USD\"].rate);\n            });\n    }, []);\n\n    const handleChange = (e) => {\n        e = e.target.value\n        setCurrencynamecode(getData[e].code);\n        setCurrencyvalue(getData[e].rate);\n    }\n\n    useEffect(() => {\n        if (currencycode !== \"\" && currencycode !== undefined) {\n            axios\n                .get(\n                    `https://api.coindesk.com/v1/bpi/historical/close.json?currency=${currencycode}&start=${lastDate}&end=${todaysDate}`\n                )\n                .then((res) => {\n                    res = res.data.bpi;\n                    // setWholedata(res.data.bpi)\n                    setLable(Object.keys(res));\n                    setData(Object.values(res));\n                });\n        }\n    }, [currencycode])\n\n    return (\n        <div className=\"p-3\">\n            <h5 className=\"p-3\">1 Bitcoin Equals = {currencyvalue} {currencycode}</h5>\n\n            <select onChange={(e) => handleChange(e)} defaultValue=\"USD\" className=\"form-select form-select-lg mb-3 m-2\" aria-label=\".form-select-lg example\" style={{ maxWidth: \"300px\", display: \"inline-block\", justifyContent: \"center\" }}>\n                {myoptions.map(item => <option key={item.value} value={item.value}>{item.label}</option>)}\n            </select>\n\n            <Line data={mydata} options={options} width={50} height={20} />\n\n        </div>\n    )\n}\n\nexport default Converter\n","import Converter from \"./Converter\";\nimport \"./App.css\";\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Converter />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}